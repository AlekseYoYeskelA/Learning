//Вам нужно обезвредить бомбу, а время поджимает! Ваш информатор предоставит вам код кругового массива длины n и ключ k.
//Чтобы расшифровать код, нужно заменить каждую цифру. Все числа заменяются одновременно.
//- Если k > 0, замените i-е число суммой следующих k чисел.
//- Если k < 0, замените i-е число суммой предыдущих k чисел.
//- Если k == 0, замените i-е число на 0.
//Поскольку код является круговым, следующий элемент code[n-1] - это code[0], а предыдущий элемент code[0] - это code[n-1].
//Учитывая циклический массив code и целочисленный ключ k, верните расшифрованный код, чтобы обезвредить бомбу!

//Пример 1: Вход: код = [5,7,1,4], k = 3 Выход: [12,10,16,13]
//Пояснение: Каждое число заменяется суммой следующих 3 чисел.
//Расшифрованный код имеет вид [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Обратите внимание, что числа обернулись вокруг.

//Пример 2:
//Вход: код = [1,2,3,4], k = 0 Выход: [0,0,0,0]
//Пояснение: Когда k равно нулю, числа заменяются на 0.

//Пример 3:
//Вход: код = [2,4,9,3], k = -2 Выход: [12,5,6,13]
//Пояснения: Расшифрованный код - это [3+9, 2+3, 4+2, 9+4].
//Обратите внимание, что числа снова обернулись вокруг друг друга. Если k отрицательно, то сумма равна предыдущим числам.


package leetcode;

import java.util.Arrays;

public class Task1652 {
    public int[] decrypt(int[] code, int k) {
        int[] result = new int[code.length];                       //создаем результирующий массив с длиной == code
        if (k == 0) {                                              //если k==0, возвращаем массив [0,0,0,0]
            return result;
        }

        int sum = 0;                                               //объявляем переменную суммы
        if (k > 0) {                                               //если k положительное:
            for (int i = 1; i <= k; i++) {                         //итерируемся от 1 до k (скользящее окно длиной == |k|, сдвиг вправо)
                sum += code[i % code.length];                      //придаем значение суммы, равное сумме следующих k значений массива code (цикличный массив)
            }

            for (int i = 0; i < code.length; i++) {                //итерируем по массиву code
                result[i] = sum;                                   //присваиваем i-му эл-ту результирующего массива значение суммы
                sum -= code[(i + 1) % code.length];                //сдвигаем левую границу окна/суммы вправо
                sum += code[(i + 1 + k) % code.length];            //сдвигаем правую границу окна/суммы вправо
            }
        } else {                                                   //если k отрицательное
            for (int i = -k; i > 0; i--) {                         //итерируемся от -k до 1 (скользящее окно длиной == |k|, сдвиг влево)
                sum += code[(code.length - i) % code.length];      //придаем значение суммы, равное сумме предыдущих k значений массива code (цикличный массив)
            }

            for (int i = 0; i < code.length; i++) {                //итерируемся по массиву code
                result[i] = sum;                                   //присваиваем i-му эл-ту результирующего массива значение суммы
                sum -= code[(code.length + i + k) % code.length];  //сдвигаем правую границу окна/суммы влево
                sum += code[i % code.length];                      //сдвигаем левую границу окна/суммы влево
            }
        }
        return result;                                             //возвращаем результирующий массив
    }


    public int[] decrypt1(int[] code, int k) {
        int[] res = new int[code.length];
        if (k == 0) {
            return res;
        }
        int start = 1;
        int end = k;
        int sum = 0;
        if (k < 0) { // If k < 0, the starting point will be end of the array.
            k = -k;
            start = code.length - k;
            end = code.length - 1;
        }
        for (int i = start; i <= end; i++) {
            sum += code[i];
        }
        for (int i = 0; i < code.length; i++) {
            res[i] = sum;
            sum -= code[(start++) % code.length];
            sum += code[(++end) % code.length];
        }
        return res;
    }
}

class Test1652 {
    public static void main(String[] args) {
        Task1652 t = new Task1652();
        int[] code = {5, 7, 1, 4}; //12, 10, 16, 13
        int[] code1 = {2, 4, 9, 3}; //12, 5, 6, 13
        int k1 = -2;
        int k = 3;
        System.out.println(Arrays.toString(t.decrypt(code1, k1)));
    }
}
