package leetcode;//Вам даны две строки s и t, состоящие только из строчных английских букв.
//Верните минимальное количество символов, которые нужно добавить в конец s, чтобы t стала подпоследовательностью s.
//Подпоследовательность - это строка, которая может быть получена из другой строки путем удаления некоторых
//или ни одного символа без изменения порядка оставшихся символов.
//
// Пример 1:
// Вход: s = "coaching", t = "coding"
// Выход: 4
// Объяснение: Добавьте символы "ding" в конец s так, чтобы s = "coachingding".
// Теперь t - подпоследовательность s ("coachingding").
// Можно показать, что добавление любых 3 символов в конец s никогда не сделает t подпоследовательностью.
//
// Пример 2:
// Вход: s = "abcde", t = "a"
// Выход: 0
// Объяснение: t уже является подпоследовательностью s ("abcde").
//
// Пример 3:
// Вход: s = "z",
// t = "abcde"
// Выход:5
// Пояснение: Добавим символы "abcde" в конец s так, чтобы s = "zabcde".
// Теперь t - подпоследовательность s ("zabcde").
// Можно показать, что добавление любых 4 символов в конец s никогда не сделает t подпоследовательностью.
//Подсказка 1: Найдите самый длинный префикс t, который является подпоследовательностью s.
//Подсказка 2: Используйте две переменные для отслеживания местоположения символов в s и t.
//Если символы совпадают, увеличьте обе переменные. В противном случае увеличивайте только переменную для s.
//Подсказка 3: Оставшиеся символы в t должны быть добавлены в конец s.


public class Task2486 {
    public static int appendCharacters(String s, String t) {
        int first = 0;
        int longestPrefix = 0;
        while (first < s.length() && longestPrefix < t.length()) {
            if (s.charAt(first) == t.charAt(longestPrefix)) {
                longestPrefix++;
            }
            first++;
        }
        return t.length() - longestPrefix;
    }

    public static void main(String[] args) {
        System.out.println(appendCharacters("coaching", "coding"));
    }
}